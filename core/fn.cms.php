<?php
/***************************************************************************
*                                                                          *
*   (c) 2004 Vladimir V. Kalynyak, Alexey V. Vinokurov, Ilya M. Shalnev    *
*                                                                          *
* This  is  commercial  software,  only  users  who have purchased a valid *
* license  and  accept  to the terms of the  License Agreement can install *
* and use this program.                                                    *
*                                                                          *
****************************************************************************
* PLEASE READ THE FULL TEXT  OF THE SOFTWARE  LICENSE   AGREEMENT  IN  THE *
* "copyright.txt" FILE PROVIDED WITH THIS DISTRIBUTION PACKAGE.            *
****************************************************************************/


if ( !defined('AREA') )	{ die('Access denied');	}

// basic cms page types
define('PAGE_TYPE_LINK', 'L');
define('PAGE_TYPE_TEXT', 'T');

/**
 * Returns list of pages
 * <i>$params</i> - Array of various parameters used for element selection:
 * <ul>
 *      <li>page_id - If defined and not zero, get data for the page with this id; otherwise get data for all pages</li>
 *      <li>item_ids - A comma-delimited page identifiers list; if defined, get data for the pages with these ids; otherwise get data for all pages</li>
 *      <li>except_id - Identifier of the page to be excluded from the result</li>
 *   	<li>parent_id - If defined and not zero, get data for the pages with this parent page id</li>
 *   	<li>active_page_id - Identifier of the page being currently shown</li>
 *   	<li>current_page_id - The same as <i>active_page_id</i></li>
 *    
 *   	<li>add_root - If defined, additionally returns root element data</li>
 *  	<li>subpages - If defined, additionally returns subpages</li>
 *  	<li>get_tree - If defined, pages will be returned as tree; otherwise as list. Possible value: <i>plain</i></li>
 *  	<li>visible - For pages tree: show visible branch only</li>
 *   	
 *   	<li>paginate - If defined, pagination feature will be enabled</li>
 *  	<li>items_per_page - If <i>paginate</i> is defined: items per page for pagination</li>
 *  	<li>page - If <i>paginate</i> is defined: number of the current page for pagination</li>
 *   
 *  	<li>pdescr - If defined, additionally returns descriptions.  Possible value: <i>Y</i></li>
 *   
 *   	<li>vendor_pages - If defined, try to return pages for the company defined by <i>company_id</i></li>
 *   	<li>company_id - If <i>vendor_pages</i> is defined: if defined, get data for the company with this id</li>
 *   
 *   	<li>neighbours - If defined, try to return neighbor pages for the page with the id <i>neighbours_page_id</i></li>
 *   	<li>neighbours_page_id -  If <i>neighbours</i> is defined: if defined, get neighbor pages for the page with this id</li>
 *   
 *   	<li>limit - If defined, used to limit your MySQL query results by this value</li>
 *   	<li>sort_by - Table field to sort by, default is position</li>
 *   	<li>sort_order - Sorting direction, ascending or descending; Possible values: <i>asc</i> or <i>desc</i>, default is <i>asc</i></li>
 * 
 *   	<li>status - If defined, returns pages only with this status. Can be comma delimited statuses list</li>
 * 
 *  	<li>period - If defined, get pages by time period. Time period is generated by ::fn_create_periods</li>
 *   	<li>time_from - Returns pages created earlier than this time</li>
 *   	<li>time_to - Returns pages created later than this time</li>
 *   
 *   	<li>parent_page_id - Deprecated, <i>parent_id</i> used instead</li>
 *   	<li>from_page_id - Deprecated, <i>parent_id</i> used instead</li>
 * </ul>
 * @param array $params Array of params
 * @param int $items_per_page  Limit items will be returned  fore opne page inh paginate 
 * @param string $lang_code 2-letter language code
 * @return array List of pages, params
 */
function fn_get_pages($params = array(), $items_per_page = 0, $lang_code = CART_LANGUAGE)
{
	// Init filter
	$params = fn_init_view('pages', $params);

	$default_params = array(
		'page_id' => 0,
		'page' => 1,
		'visible' => false,
		'get_tree' => '',
		'items_per_page' => 0,
		'pdescr' => '',
		'subpages' => ''
	);

	if (is_array($params)) {
		$params = array_merge($default_params, $params);
	} else {
		$params = $default_params;
	}

	if (empty($params['pname']) && empty($params['pdescr']) && empty($params['subpages'])) {
		$params['pname'] = 'Y';
	}

	$fields = array (
		'?:pages.*',
		'?:page_descriptions.*'
	);

	// Define sort fields
	$sortings = array (
		'position' => array (
			'?:pages.position',
			'?:page_descriptions.page',
		),
        'name' => '?:page_descriptions.page',
        'timestamp' => '?:pages.timestamp',
        'type' => '?:pages.page_type',
		'multi_level' => array (
			'?:pages.parent_id',
			'?:pages.position',
			'?:page_descriptions.page',
		),
    );

    $directions = array (
        'asc' => 'asc',
        'desc' => 'desc'
    );

	$auth = & $_SESSION['auth'];

	$condition = '1';
	$join = $limit = $group_by = '';

	if (isset($params['q']) && fn_string_not_empty($params['q'])) {

		$params['q'] = trim($params['q']);
		if ($params['match'] == 'any') {
			$pieces = fn_explode(' ', $params['q']);
			$search_type = ' OR ';
		} elseif ($params['match'] == 'all') {
			$pieces = fn_explode(' ', $params['q']);
			$search_type = ' AND ';
		} else {
			$pieces = array($params['q']);
			$search_type = '';
		}

		$_condition = array();
		foreach ($pieces as $piece) {
			if (strlen($piece) == 0) {
				continue;
			}

			$tmp = array();
			if (!empty($params['pname']) && $params['pname'] == 'Y') {
				$tmp[] = db_quote("?:page_descriptions.page LIKE ?l", "%$piece%"); // check search words
			}

			if ($params['pdescr'] == 'Y') {
				$tmp[] = db_quote("?:page_descriptions.description LIKE ?l", "%$piece%");
			}

			if (!empty($tmp)) {
				$_condition[] = '(' . implode(' OR ', $tmp) . ')';
			}
		}
		if (!empty($_condition)) {
			$condition .= ' AND (' . implode($search_type, $_condition) . ')';
		}
	}

	$condition .= fn_get_company_condition('?:pages.company_id');

	if (!empty($params['page_type'])) {
		$condition .= db_quote(" AND ?:pages.page_type = ?s", $params['page_type']);
	}

	if (isset($params['parent_id']) && $params['parent_id'] !== '') {
		$p_ids = array();
		if ($params['subpages'] == 'Y') {
			$p_ids = db_get_fields("SELECT a.page_id FROM ?:pages as a LEFT JOIN ?:pages as b ON b.page_id = ?i WHERE a.id_path LIKE CONCAT(b.id_path, '/%')", $params['parent_id']);
		}
		$p_ids[] = $params['parent_id'];

		$condition .= db_quote(" AND ?:pages.parent_id IN (?n)", $p_ids);
	}

	if (isset($params['parent_page_id'])) {
		// set parent id, that was set in block properties
		$params['from_page_id'] = $params['parent_page_id'];
	}
	if (!empty($params['from_page_id'])) {
		$from_id_path = db_get_field("SELECT id_path FROM ?:pages WHERE page_id = ?i", $params['from_page_id']);
		$condition .= db_quote(" AND ?:pages.id_path LIKE ?l", "$from_id_path/%");
	}

	if (!empty($params['status'])) {
		$condition .= db_quote(" AND ?:pages.status IN (?a)", $params['status']);
	}

	if (!empty($params['vendor_pages']) && empty($params['company_id'])) {
		return array(array(), $params);
	} elseif (!empty($params['company_id'])) {
		$condition .= db_quote(" AND ?:pages.company_id = ?i", $params['company_id']);
	}

	$condition .= db_quote(" AND ?:pages.page_type IN (?a)", array_keys(fn_get_page_object_by_type()));

	if (!empty($params['visible'])) {  // for pages tree: show visible branch only
		$page_ids = array();
		if (!empty($params['current_page_id'])) {
			$cur_id_path = db_get_field("SELECT id_path FROM ?:pages WHERE page_id = ?i", $params['current_page_id']);
			if (!empty($cur_id_path)) {
				$page_ids = explode('/', $cur_id_path);
			}
		}

		if (!empty($from_id_path)) {
			$_page_ids = explode('/', $from_id_path);
			$page_ids = array_merge($page_ids, $_page_ids);
			$page_ids = array_unique($page_ids);
		}

		$page_ids[] = $params['page_id'];
		$condition .= db_quote(" AND ?:pages.parent_id IN (?n)", $page_ids);
	}

	if (!empty($params['period']) && $params['period'] != 'A') {
		list($params['time_from'], $params['time_to']) = fn_create_periods($params);
		$condition .= db_quote(" AND (?:pages.timestamp >= ?i AND ?:pages.timestamp <= ?i)", $params['time_from'], $params['time_to']);
	}

	if (!empty($params['item_ids'])) { // get only defined pages
		$condition .= db_quote(" AND ?:pages.page_id IN (?n)", explode(',', $params['item_ids']));
	}

	if (!empty($params['except_id']) && (empty($params['item_ids']) || !empty($params['item_ids']) && !in_array($params['except_id'], explode(',', $params['item_ids'])))) {
		$condition .= db_quote(' AND ?:pages.page_id != ?i AND ?:pages.parent_id != ?i', $params['except_id'], $params['except_id']);
	}

	if (AREA != 'A') {
		$condition .= " AND (" . fn_find_array_in_set($auth['usergroup_ids'], '?:pages.usergroup_ids', true) . ")";
		$condition .= fn_get_localizations_condition('?:pages.localization', true);
		$condition .= db_quote(" AND (use_avail_period = ?s OR (use_avail_period = ?s AND avail_from_timestamp <= ?i AND avail_till_timestamp >= ?i))", 'N', 'Y', TIME, TIME);
	}

	$join = db_quote('LEFT JOIN ?:page_descriptions ON ?:pages.page_id = ?:page_descriptions.page_id AND ?:page_descriptions.lang_code = ?s', $lang_code);

	if (!empty($params['limit'])) {
		$limit = db_quote(" LIMIT 0, ?i", $params['limit']);
	}
	
	if (!empty($params['neighbours'])) {
		$parent_ids = array();
		if (!empty($params['neighbours_page_id'])) {
			$id_path = db_get_field("SELECT id_path FROM ?:pages WHERE page_id = ?i", $params['neighbours_page_id']);
			$parent_ids = explode('/', $id_path);
			if (count($parent_ids) == 1) {
				array_unshift($parent_ids, 0);
			}
			$params['root_id'] = $parent_ids[0];
		} elseif (empty($params['page_id'])) {
			$current_url = Registry::get('config.current_url');
			if (strpos($current_url, 'discussion.view') !== false || strpos($current_url, 'testimonials.html') !== false) {
				$id_path = db_get_field("SELECT id_path FROM ?:pages WHERE link LIKE ?l", '%discussion.view%');
				$parent_ids = explode('/', $id_path);
				$params['root_id'] = $parent_ids[0];
				if (!defined('CURRENT_PAGE_ID')) {
					define('CURRENT_PAGE_ID', end($parent_ids));
				}
			}
		} else {
			$parent_ids[] = 0;
		}

		$condition .= db_quote(" AND ?:pages.parent_id IN (?n)", array_unique($parent_ids));
	}	

	fn_set_hook('get_pages', $params, $join, $condition, $fields, $group_by, $sortings, $lang_code);

	if (!empty($params['get_tree'])) {
		$params['sort_by'] = 'multi_level';
	}

    if (empty($params['sort_order']) || empty($directions[$params['sort_order']])) {
        $params['sort_order'] = 'asc';
    }

    if (empty($params['sort_by']) || empty($sortings[$params['sort_by']])) {
        $params['sort_by'] = 'position';
    }

	$sorting = (is_array($sortings[$params['sort_by']]) ? implode(' ' . $directions[$params['sort_order']] . ', ', $sortings[$params['sort_by']]) : $sortings[$params['sort_by']]) . " " . $directions[$params['sort_order']];

    if (!empty($group_by)) {
    	$group_by = ' GROUP BY ' . $group_by;
    }

	// Reverse sorting (for usage in view)
	$params['sort_order'] = $params['sort_order'] == 'asc' ? 'desc' : 'asc';

	// Get search conditions
	if (!empty($params['get_conditions'])) {
		return array($fields, $join, $condition);
	}

	$total = 0;
	if (!empty($items_per_page) && !empty($params['paginate'])) {
		$total = db_get_field("SELECT COUNT(DISTINCT(?:pages.page_id)) FROM ?:pages ?p WHERE ?p ?p ORDER BY ?p", $join, $condition, $group_by, $sorting);
		$limit = fn_paginate($params['page'], $total, $items_per_page);
	}
	
	$pages = db_get_hash_array("SELECT " . implode(', ', $fields) ." FROM ?:pages ?p WHERE ?p ?p ORDER BY ?p ?p", 'page_id', $join, $condition, $group_by, $sorting, $limit);

	if (!empty($params['active_page_id']) && !empty($pages[$params['active_page_id']])) {
		$pages[$params['active_page_id']]['active'] = true;
		Registry::set('runtime.active_page_ids', explode('/', $pages[$params['active_page_id']]['id_path']));
	}

	if (!empty($pages)) {
		foreach ($pages as $k => $v) {
			$pages[$k]['level'] = substr_count($v['id_path'], '/');
		}

		if (!empty($params['get_tree'])) {
			$delete_keys = array();
			foreach ($pages as $k => $v) {
				if (!empty($v['parent_id']) && !empty($pages[$v['parent_id']])) {
					$pages[$v['parent_id']]['subpages'][$v['page_id']] = & $pages[$k];
					$delete_keys[] = $k;
				}

				if (!empty($v['parent_id']) && ((!isset($params['root_id']) && empty($pages[$v['parent_id']])) || (isset($params['root_id']) && $v['parent_id'] != $params['root_id'])) && (empty($params['from_page_id']) || $params['from_page_id'] != $v['parent_id'])) { // delete pages that don't have parent. FIXME: should be done on database layer
					$delete_keys[] = $k;
				}
			}

			foreach ($delete_keys as $k) {
				unset($pages[$k]);
			}
		} elseif (!empty($params['item_ids'])) {
			$pages = fn_sort_by_ids($pages, explode(',', $params['item_ids']), 'page_id');
		}

		if ($params['get_tree'] == 'plain') {
			$pages = fn_multi_level_to_plain($pages, 'subpages');
		}

		if (!empty($params['get_children_count'])) {
			$where_condition = !empty($params['except_id']) ? db_quote(' AND page_id != ?i', $params['except_id']) : '';
			if ($params['get_tree'] == 'plain') {
				$_page_ids = array();
				foreach ($pages as $_p) {
					$_page_ids[] = $_p['page_id'];
				}
			} else {
				$_page_ids = array_keys($pages);
			}
			$children = db_get_hash_single_array("SELECT parent_id, COUNT(page_id) as children FROM ?:pages WHERE parent_id IN (?n) ?p GROUP BY parent_id", array('parent_id', 'children'), $_page_ids, $where_condition);

			if (!empty($children)) {
				if ($params['get_tree'] == 'plain') {
					foreach ($pages as $_id => $_p) {
						if (!empty($children[$_p['page_id']])) {
							$pages[$_id]['has_children'] = true;
						}
					}
				} else {
					foreach ($children as $k => $v) {
						$pages[$k]['has_children'] = !empty($v);
					}
				}
			}
		}
	}

	if (!empty($params['add_root'])) {
		array_unshift($pages, array('page_id' => '', 'page' => $params['add_root']));
	}

	fn_dropdown_appearance_cut_second_third_levels($pages, 'subpages', $params);
	
	fn_set_hook('post_get_pages', $pages, $params, $lang_code);

	return array($pages, $params);
}


/**
 * Updates page data by id or create new
 * 
 * @param array $page_data Page data
 * @param int $page_id Page idetifier, if equals zero new page will be created
 * @param string $lang_code 2 letters language code
 * @return int Page identifier on success, false otherwise
 */
function fn_update_page($page_data, $page_id = 0, $lang_code = CART_LANGUAGE)
{
	/**
	 * Actions before all checks and initializations
	 * 
	 * @param array $page_data Page data
	 * @param int $page_id Page idetifier, if equals zero new page will be created
	 * @param string $lang_code 2 letters language code
	 */
	fn_set_hook("update_page_pre", $page_data, $page_id, $lang_code);

	if (!empty($page_data)) {
		if (!empty($page_data['avail_from_timestamp'])) {
			$page_data['avail_from_timestamp'] = fn_parse_date($page_data['avail_from_timestamp']);
		} else {
			$page_data['avail_from_timestamp'] = 0;
		}

		if (!empty($page_data['avail_till_timestamp'])) {
			$page_data['avail_till_timestamp'] = fn_parse_date($page_data['avail_till_timestamp']) + 86399;
		} else {
			$page_data['avail_till_timestamp'] = 0;
		}
		if (isset($page_data['usergroup_ids'])) {
			$page_data['usergroup_ids'] = empty($page_data['usergroup_ids']) ? '0' : implode(',', $page_data['usergroup_ids']);
		}

		$page_data['add_items'] = empty($page_data['add_items']) ? array() : $page_data['add_items'];

		if (isset($page_data['timestamp'])) {
			$page_data['timestamp'] = fn_parse_date($page_data['timestamp']);
		}

		if (isset($page_data['localization'])) {
			$page_data['localization'] = empty($page_data['localization']) ? '' : fn_implode_localizations($page_data['localization']);
		}

		$old_page_data = array();

		/**
		 * Actions after all checks and initializations and before update page
		 * 
		 * @param array $page_data Page data
		 * @param int $page_id Page idetifier, if equals zero new page will be created
		 * @param string $lang_code 2 letters language code
		 */
		fn_set_hook('update_page_before', $page_data, $page_id, $lang_code);

		if (empty($page_id)) {
			// page title required
			if (empty($page_data['page'])) {
				return false;
			}

			// add new page
			$create = true;
			$page_data['page_id'] = $page_id = db_query('INSERT INTO ?:pages ?e', $page_data);

			foreach ((array)Registry::get('languages') as $page_data['lang_code'] => $v) {
				db_query('INSERT INTO ?:page_descriptions ?e', $page_data);
			}

			// now we need to update 'id_path' field, as we know $page_id
			/* Generate id_path for page */
			$parent_id = intval($page_data['parent_id']);
			if ($parent_id == 0) {
				$id_path = $page_id;
			} else {
				$id_path = db_get_row("SELECT id_path FROM ?:pages WHERE page_id = ?i", $parent_id);
				$id_path = $id_path['id_path'] . '/' . $page_id;
			}

			db_query('UPDATE ?:pages SET ?u WHERE page_id = ?i', array('id_path' => $id_path), $page_id);

		} else {
			if (!fn_check_company_id('pages', 'page_id', $page_id)) {
				fn_company_access_denied_notification();
				return false;
			}
			$old_page_data = fn_get_page_data($page_id, $lang_code);
			$create = false;
			// page title is not updated
			if (empty($page_data['page'])) {
				unset($page_data['page']);
			}

			// update existing page
			db_query('UPDATE ?:pages SET ?u WHERE page_id = ?i', $page_data, $page_id);
			db_query('UPDATE ?:page_descriptions SET ?u WHERE page_id = ?i AND lang_code = ?s', $page_data, $page_id, $lang_code);

			// regenerate id_path for child pages
			if (isset($page_data['parent_id'])) {
				fn_change_page_parent($page_id, $page_data['parent_id']);
			}
		}
	}

	/**
	 * Actions after page update
	 * 
	 * @param array $page_data Page data
	 * @param int $page_id Page idetifier, if equals zero new page will be created
	 * @param string $lang_code 2 letters language code
	 * @param bool $create True if page was created, falce otherwise
	 * @param array $old_page_data Page data before update
	 */
	fn_set_hook('update_page_post', $page_data, $page_id, $lang_code, $create, $old_page_data);

	return $page_id;
}

/**
 * Changes company_id on child pages.
 *
 * @param int $page_id
 * @param int $new_company_id
 */
function fn_change_page_company($page_id, $new_company_id)
{
	$current_path = db_get_field("SELECT id_path FROM ?:pages WHERE page_id = ?i", $page_id);
	
	if (!empty($current_path) && fn_check_company_exists($new_company_id)) {
		db_query("UPDATE ?:pages SET company_id = ?i WHERE id_path LIKE ?l", $new_company_id, "$current_path/%");
	}
}

/**
 * Changes parent of page
 * 
 * @param int $page_id Page identifier to change parent
 * @param int $new_parent_id Identifier of new parent page
 * @return bool True on success false otherwise
 */
function fn_change_page_parent($page_id, $new_parent_id)
{
	if (!empty($page_id)) {

		//$page_data['localization'] = empty($page_data['localization']) ? '' : fn_implode_localizations($page_data['localization']);

		$new_parent_path = db_get_field("SELECT id_path FROM ?:pages WHERE page_id = ?i", $new_parent_id);
		$current_path = db_get_field("SELECT id_path FROM ?:pages WHERE page_id = ?i", $page_id);

		if (!empty($new_parent_path) && !empty($current_path)) {
			db_query("UPDATE ?:pages SET parent_id = ?i, id_path = ?s WHERE page_id = ?i", $new_parent_id, "$new_parent_path/$page_id", $page_id);
			db_query("UPDATE ?:pages SET id_path = CONCAT(?s, SUBSTRING(id_path, ?i)) WHERE id_path LIKE ?l", "$new_parent_path/$page_id/", (strlen($current_path."/") + 1), "$current_path/%");

		} elseif (empty($new_parent_path) && !empty($current_path)) {
			db_query("UPDATE ?:pages SET parent_id = ?i, id_path = ?s WHERE page_id = ?i", $new_parent_id, $page_id, $page_id);
			db_query("UPDATE ?:pages SET id_path = CONCAT(?s, SUBSTRING(id_path, ?i)) WHERE id_path LIKE ?l", "$page_id/", (strlen($current_path."/") + 1), "$current_path/%");
		}
		return true;
	}

	return false;
}

/**
 * Clones page
 * 
 * @param int $page_id Identifier of page to be cloned
 * @return array New page data
 */
function fn_clone_page($page_id)
{
	// Clone main data
	$data = db_get_row("SELECT * FROM ?:pages WHERE page_id = ?i", $page_id);
	unset($data['page_id']);
	$data['status'] = 'D';

	fn_set_hook('clone_page_pre', $page_id, $data);

	if (empty($data)) {
		return false;
	}

	$new_page_id = db_query("INSERT INTO ?:pages ?e", $data);

	// Update parent-child deps
	$id_path = explode('/', $data['id_path']);
	array_pop($id_path);
	$id_path[] = $new_page_id;
	db_query("UPDATE ?:pages SET id_path = ?s WHERE page_id = ?i", implode('/', $id_path), $new_page_id);

	// Clone descriptions
	$data = db_get_array("SELECT * FROM ?:page_descriptions WHERE page_id = ?i", $page_id);
	foreach ($data as $v) {
		$v['page_id'] = $new_page_id;
		if ($v['lang_code'] == CART_LANGUAGE) {
			$orig_name = $v['page'];
			$new_name = $v['page'] . ' [CLONE]';
		}

		$v['page'] .= ' [CLONE]';
		db_query("INSERT INTO ?:page_descriptions ?e", $v);
	}

	Bm_Block::instance()->clone_dynamic_object_data('pages', $page_id, $new_page_id);

	fn_set_hook('clone_page', $page_id, $new_page_id);

	return array('page_id' => $new_page_id, 'orig_name' => $orig_name, 'page' => $new_name);
}

/**
 * Returns page object data by page type (page types may be expanded by Add-ons)
 * 
 * @param string $page_type Page type
 * @return array Page object data
 */
function fn_get_page_object_by_type($page_type = '')
{
	$types = array (
		PAGE_TYPE_TEXT => array(
			'single' => 'page',
			'name' => 'pages',
			'add_name' => 'add_page',
			'edit_name' => 'editing_page',
			'new_name' => 'new_page',
		),
		PAGE_TYPE_LINK => array(
			'single' => 'link',
			'name' => 'links',
			'add_name' => 'add_link',
			'edit_name' => 'editing_link',
			'new_name' => 'new_link',
		),
	);

	fn_set_hook('page_object_by_type', $types);

	return empty($page_type) ? $types : $types[$page_type];
}

/**
 * Gets list of pages and returns as plain list
 * 
 * @return array List of pages
 */
function fn_get_pages_plain_list($params = array())
{
	$default_params = array(
		'get_tree' => 'plain',
		'get_parent_pages' => true
	);

	if (is_array($params)) {
		$params = array_merge($default_params, $params);
	} else {
		$params = $default_params;
	}

	fn_set_hook('get_pages_plain_list', $params);

	list($pages) = fn_get_pages($params);

	return $pages;
}

/**
 * Function cut the second and third level childs arrays.
 * 
 * @param array $data Given data
 * @param string $childs_name Name of array with child elements
 * @param array $params Array with parameters of displyaing second and third childs elements
 */
function fn_dropdown_appearance_cut_second_third_levels(&$data, $childs_name, $params)
{
	if (isset($params['dropdown_second_level_elements']) || isset($params['dropdown_third_level_elements'])) {
		$params['dropdown_second_level_elements'] = !empty($params['dropdown_second_level_elements']) ? intval($params['dropdown_second_level_elements']) : 0;
		$params['dropdown_third_level_elements'] = !empty($params['dropdown_third_level_elements']) ? intval($params['dropdown_third_level_elements']) : 0;
		if ($params['dropdown_second_level_elements'] < 0) {
			$params['dropdown_second_level_elements'] = 0;
		}
		if ($params['dropdown_third_level_elements'] < 0) {
			$params['dropdown_third_level_elements'] = 0;
		}
		
		foreach ($data as $k1 => $v1) {
			if (!empty($v1[$childs_name])) {
				$count2 = count($v1[$childs_name]);
				if ($count2 > $params['dropdown_second_level_elements']) {
					$data[$k1][$childs_name] = array_slice($v1[$childs_name], 0, $params['dropdown_second_level_elements']);
					$data[$k1]['show_more'] = true;
				}

				foreach ($data[$k1][$childs_name] as $k2 => $v2) {
					if (!empty($v2[$childs_name])) {
						$count3 = count($v2[$childs_name]);
						if ($count3 > $params['dropdown_third_level_elements']) {
							$data[$k1][$childs_name][$k2][$childs_name] = array_slice($v2[$childs_name], 0, $params['dropdown_third_level_elements']);
							$data[$k1][$childs_name][$k2]['show_more'] = true;
						}
					}
				}
			}
		}
	}
}

/**
 * Fucntion forms detailed-page URL for elements in the block with Dropdown appearance
 * 
 * @param array $object_data Current element of block
 * @param string $object_type Type of object
 * @return string URL to the detail page of the given object
 */
function fn_form_dropdown_object_link($object_data, $object_type)
{
	$result = '';

	if ($object_type == 'categories') {
		$result = fn_url('categories.view?category_id=' . $object_data['category_id']);
	} elseif ($object_type == 'pages') {
		if (isset($object_data['page_type']) && $object_data['page_type'] == 'L' && isset($object_data['link'])) {
			$result = $object_data['link'];
		} else {
			$result = fn_url('pages.view?page_id=' . $object_data['page_id']);
		}
	} elseif (!empty($object_data['href'])) {
		$result = fn_url($object_data['href']);
	}
	
	return $result;
}

/**
 * Function checks should the given menu element be marked as active or not
 *
 * @param array $object_data Menu item
 * @param string $object_type Type of menu item (category or page data)
 * @return bool
 */
function fn_check_is_active_menu_item($object_data, $object_type)
{
	$active_ids = array();
	$id = null;

	if ($object_type == 'categories') {
		$active_ids = Registry::if_get('runtime.active_category_ids', array());
		$id = $object_data['category_id'];
	} elseif ($object_type == 'pages') {
		$active_ids = Registry::if_get('runtime.active_page_ids', array());
		$id = $object_data['page_id'];
	} else {
		return false;
	}

	return in_array($id, $active_ids);
}

/**
 * Gets page data
 * 
 * @param mixed $page_id Page identifier
 * @param string $lang_code 2 letters language code
 * @param bool $preview Page data for preview (ignore cahce)
 * @return array|bool Page data on success, false otherwise
 */
function fn_get_page_data($page_id, $lang_code = CART_LANGUAGE, $preview = false)
{
	static $cache = array();

	if (empty($page_id)) {
		return false;
	}

	if (empty($cache[$page_id])) {
		$condition = '';

		$condition .= fn_get_company_condition('?:pages.company_id');

		if (AREA != 'A' && !$preview) {
			$condition .= " AND (" . fn_find_array_in_set($_SESSION['auth']['usergroup_ids'], '?:pages.usergroup_ids', true) . ")";
		}

		$condition .= db_quote(" AND ?:pages.page_type IN (?a)", array_keys(fn_get_page_object_by_type()));

		$cache[$page_id] = db_get_row(
			"SELECT * FROM ?:pages "
				. "INNER JOIN ?:page_descriptions ON ?:pages.page_id = ?:page_descriptions.page_id "
			. "WHERE ?:pages.page_id = ?i AND ?:page_descriptions.lang_code = ?s ?p", 
			$page_id, $lang_code, $condition
		);

		if (empty($cache[$page_id]) || (AREA != 'A' && ($cache[$page_id]['status'] == 'D' || $cache[$page_id]['use_avail_period'] == 'Y' && ($cache[$page_id]['avail_from_timestamp'] > TIME || $cache[$page_id]['avail_till_timestamp'] < TIME))) && empty($preview)) {
			return false;
		}
		fn_set_hook('get_page_data', $cache[$page_id], $lang_code);

		// Generate meta description automatically
		if (empty($cache[$page_id]['meta_description']) && defined('AUTO_META_DESCRIPTION') && AREA != 'A') {
			$cache[$page_id]['meta_description'] = fn_generate_meta_description($cache[$page_id]['description']);
		}
	}

	return (!empty($cache[$page_id]) ? $cache[$page_id] : false);
}

/**
 * Gets page name
 * 
 * @param array $page_id Page identifier
 * @param string $lang_code 2 letters language code
 * @return string|bool Page name on success, false otherwise
 */
function fn_get_page_name($page_id, $lang_code = CART_LANGUAGE)
{
	if (!empty($page_id)) {
		if (is_array($page_id)) {
			return db_get_hash_single_array("SELECT page_id, page FROM ?:page_descriptions WHERE page_id IN (?n) AND lang_code = ?s", array('page_id', 'page'), $page_id, $lang_code);
		} else {
			return db_get_field("SELECT page FROM ?:page_descriptions WHERE page_id = ?i AND lang_code = ?s", $page_id, $lang_code);
		}
	}

	return false;
}

function fn_get_file_description($path, $descr_key, $get_lang_var = false)
{
	$return = '';

	$fd = @fopen($path, 'r');
	if ($fd !== false){
		$counter = 1;

		while (($s = fgets($fd, 4096)) && ($counter <= 3)) {
			preg_match('/' . $descr_key . ':(\w+)/i', $s, $matches);
			if (!empty($matches[1])) {
				$return = $get_lang_var ? $matches[1] : fn_get_lang_var($matches[1]);
				break;
			}

			$counter++;
		}

		fclose($fd);
	}

	return $return;
}

/**
 * Gets active addons skin dir
 * 
 * @deprecated deprecated since version 3.0
 * @return array Always empty array
 */
function fn_get_active_addons_skin_dir()
{
	fn_generate_deprecated_function_notice('fn_get_active_addons_skin_dir()', 'Block Manager classes');
	return array();
}

/**
 *  Delete page and its subpages
 *
 * @param int $page_id Page ID
 * @param bool $recurse Delete page recursively or not
 * @return array Returns ids of deleted pages or false if function can't delete page
 */
function fn_delete_page($page_id, $recurse = true)
{
    $page_id = intval($page_id);
	if (!empty($page_id) && fn_check_company_id('pages', 'page_id', $page_id)) {

		// Delete all subpages
		if ($recurse == true) {
			$id_path = db_get_field("SELECT id_path FROM ?:pages WHERE page_id = ?i", $page_id);
			$page_ids	= db_get_fields("SELECT page_id FROM ?:pages WHERE page_id = ?i OR id_path LIKE ?l", $page_id, "$id_path/%");
		} else {
			$page_ids = array($page_id);
		}

		foreach ($page_ids as $v) {
			// Deleting page
			db_query("DELETE FROM ?:pages WHERE page_id = ?i", $v);
			db_query("DELETE FROM ?:page_descriptions WHERE page_id = ?i", $v);
			fn_set_hook('delete_page', $v);

			Bm_Block::instance()->remove_dynamic_object_data('pages', $v);
		}

		return $page_ids; // Returns ids of deleted pages
	} else {
		return false;
	}
}

/** Block manager **/

/**
 * The function returns the name of the template
 * @deprecated deprecated since version 3.0
 * @param string $structure_section
 * @return array Empty array
 */
function fn_get_block_properties($structure_section = '')
{
	fn_generate_deprecated_function_notice('fn_get_block_template_description()', 'Block Manager classes');
	return array();
}

/**
 * The function returns the name of the template
 * @deprecated deprecated since version 3.0
 * @param string $template path to template
 * @return array Empty array
 */
function fn_get_block_template_description($template)
{
	fn_generate_deprecated_function_notice('fn_get_block_template_description()', 'Block Manager classes');
	return array();
}

/**
 * Returns blocks specific settings
 * @deprecated deprecated since version 3.0
 * @return array Empty array
 */
function fn_get_block_specific_settings()
{
	fn_generate_deprecated_function_notice('fn_get_block_specific_settings()', 'Block Manager classes');
	return array();
}

/**
 * The function returns the list of available block locations
 * @deprecated deprecated since version 3.0
 * @return array Empty array
 */
function fn_get_block_locations()
{
	fn_generate_deprecated_function_notice('fn_get_block_locations()', 'Block Manager classes');
	return array();
}

/**
 * The function returns the list of the blocks
 * @deprecated deprecated since version 3.0
 * @param array $params
 * @param bool $allow_sorting
 * @param $lang_code
 * @return array Empty array
 */
function fn_get_blocks($params = array(), $allow_sorting = true, $lang_code = CART_LANGUAGE)
{
	fn_generate_deprecated_function_notice('fn_get_blocks()', 'Block Manager classes');
	return array();
}

/**
 * Gets static locations
 * @deprecated deprecated since version 3.0
 * @param $location
 * @return array Empty array
 */
function fn_check_static_location($location)
{
	fn_generate_deprecated_function_notice('fn_check_static_location()', 'Block Manager classes');
	return array();
}

/**
 * Gets product tabs blocks
 * @deprecated deprecated since version 3.0
 * @param $object_id
 * @param $blocks
 * @param array $params
 * @param $lang_code
 * @return array Empty array
 */
function fn_get_product_tabs_blocks($object_id, &$blocks, $params = array(), $lang_code = CART_LANGUAGE)
{
	fn_generate_deprecated_function_notice('fn_get_product_tabs_blocks()', 'Block Manager classes');
	return array();
}

/**
 * Sort blocks
 * @deprecated deprecated since version 3.0
 * @param $object_id
 * @param $location
 * @param $blocks
 * @return array Empty array
 */
function fn_sort_blocks($object_id, $location, $blocks)
{
	fn_generate_deprecated_function_notice('fn_sort_blocks()', 'Block Manager classes');
	return array();
}

/**
 * Gets blocks items
 * @deprecated deprecated since version 3.0
 * @param $block
 * @param array $properties
 * @return array Empty array
 */
function fn_get_block_items($block, $properties = array())
{
	fn_generate_deprecated_function_notice('fn_get_block_items()', 'Block Manager classes');
	return array();
}

/**
 * Gets blocks data
 * @deprecated deprecated since version 3.0
 * @param $params
 * @param $blocks
 * @param int $object_id
 * @param string $location
 * @return array Empty array
 */
function fn_get_selected_block_data($params, $blocks, $object_id = 0, $location = 'products')
{
	fn_generate_deprecated_function_notice('fn_get_selected_block_data()', 'Block Manager classes');
	return array();
}

/**
 * Gets blocks scroller directions
 * @deprecated deprecated since version 3.0
 * @return array Empty array
 */
function fn_get_block_scroller_directions()
{
	fn_generate_deprecated_function_notice('fn_get_block_scroller_directions()', 'Block Manager classes');
	return array();
}

/**
 * Gets blocks locations
 * @deprecated deprecated since version 3.0
 * @param $section
 * @return array Empty array
 */
function fn_get_blocks_location($section)
{
	fn_generate_deprecated_function_notice('fn_get_blocks_location()', 'Block Manager classes');
	return array();
}

/**
 * Cleans block items
 * @deprecated deprecated since version 3.0
 * @param $object
 * @param $object_id
 * @return bool Always true
 */
function fn_clean_block_items($object, $object_id)
{
	fn_generate_deprecated_function_notice('fn_clean_block_items()', 'Block Manager classes');
	return true;
}

/**
 * Cleans block links
 * @deprecated deprecated since version 3.0
 * @param $object
 * @param $object_id
 * @return bool Always true
 */
function fn_clean_block_links($object, $object_id)
{
	fn_generate_deprecated_function_notice('fn_clean_block_links()', 'Block Manager classes');
	return true;
}

/**
 * Clones block links
 * @deprecated deprecated since version 3.0
 * @param $object
 * @param $object_id
 * @param $destination_id
 * @return bool Always true
 */
function fn_clone_block_links($object, $object_id, $destination_id)
{
	fn_generate_deprecated_function_notice('fn_clone_block_links()', 'Block Manager classes');
	return true;
}

/**
 * Adds items to block
 * @deprecated deprecated since version 3.0
 * @param $block_id
 * @param $objects
 * @param int $object_id
 * @param string $location
 * @param bool $add_vals
 * @param int $page
 * @return bool Always true
 */
function fn_add_items_to_block($block_id, $objects, $object_id = 0, $location = '', $add_vals = false, $page = 0)
{
	fn_generate_deprecated_function_notice('fn_add_items_to_block()', 'Block Manager classes');
	return true;
}

/**
 * Assign block data
 * @deprecated deprecated since version 3.0
 * @param $params
 * @return bool Always true
 */
function fn_assign_block($params)
{
	fn_generate_deprecated_function_notice('fn_assign_block()', 'Block Manager classes');
	return true;
}

/**
 * Gets html content
 * @deprecated deprecated since version 3.0
 * @param $params
 * @return array Always empty array
 */
function fn_get_html_content($params)
{
	fn_generate_deprecated_function_notice('fn_get_html_content()', 'Block Manager classes');
	return array();
}

/**
 * Gets all block settings
 * @deprecated deprecated since version 3.0
 * @param string $selected_section
 * @return array Always empty array
 */
function fn_get_all_blocks($selected_section = '')
{
	fn_generate_deprecated_function_notice('fn_get_all_blocks()', 'Block Manager classes');
	return array();
}

/**
 * Gets all block settings
 * @deprecated deprecated since version 3.0
 * @param $blocks
 * @param $block_settings
 * @return array Always empty array
 */
function fn_check_blocks_availability($blocks, $block_settings)
{
	fn_generate_deprecated_function_notice('fn_check_blocks_availability()', 'Block Manager classes');
	return array();
}

/**
 * Returns aviability of group
 * @deprecated deprecated since version 3.0
 * @param $selected_section
 * @param int $object_id
 * @param $lang_code
 * @return array Always empty array
 */
function fn_get_available_group($selected_section, $object_id = 0, $lang_code = CART_LANGUAGE)
{
	fn_generate_deprecated_function_notice('fn_get_available_group()', 'Block Manager classes');
	return array();
}

/**
 * Gets rss feed
 * @deprecated deprecated since version 3.0
 * @param $data
 * @return array Always empty array
 */
function fn_get_external_rss_feed($data)
{
	fn_generate_deprecated_function_notice('fn_get_available_group()', 'Block Manager classes');
	return array();
}

/**
 * If properties for given location differs from the properties for all_pages location then function saves properties for this location
 * else function unsets old properties for given location and later they will be retrieved from all_pages properties.
 * @deprecated deprecated since version 3.0
 * @param array $all_properties Array with properties for all locations
 * @param array $cur_properties Array with propertions for given location
 * @param string $location Current location
 * @param $block_type
 * @param string $text_id
 * @return array Always empty array
 */
function fn_serialize_block_properties($all_properties, $cur_properties, $location, $block_type, $text_id = '')
{
	fn_generate_deprecated_function_notice('fn_serialize_block_properties()', 'Block Manager classes');
	return array();
}

/**
 * Returns properties for given location or for all_pages if given location properties are empty.
 * @deprecated deprecated since version 3.0
 * @param $ser_properties
 * @param $location
 * @param $block_type
 * @param string $text_id
 * @return array Always empty array
 */
function fn_unserialize_block_properties($ser_properties, $location, $block_type, $text_id = '')
{
	fn_generate_deprecated_function_notice('fn_unserialize_block_properties()', 'Block Manager classes');
	return array();
}

/**
 * Function get block cache properties from schema
 * @deprecated deprecated since version 3.0
 * @return array properties
 * @return array Always empty array
 */
function fn_get_block_cache_properties()
{
	fn_generate_deprecated_function_notice('fn_get_block_cache_properties()', 'Block Manager classes');
	return array();
}

/**
 * Function get block cache properties from schema
 * 
 * @deprecated deprecated since version 3.0
 * @param bool $delete is need delete cache
 * @return array Always empty array
 */
function fn_delete_block_cache($delete)
{
	fn_generate_deprecated_function_notice('fn_delete_block_cache()', 'Block Manager classes');
	return array();
}

/**
 * Returns currencies list from registry
 * 
 * @return array Currencies list
 */
function fn_get_currencies() 
{
	return Registry::get('currencies');
}

/**
 * Returns only active languages list list (as lang_code => array(name, lang_code, status)
 * 
 * @param bool $include_hidden if true get hiddenlanguages too
 * @return array Languages list
 */
function fn_get_languages($include_hidden = false) 
{
	$language_condition = $include_hidden ? "WHERE status <> 'D'" : "WHERE status = 'A'";
	return db_get_hash_array("SELECT lang_code, name FROM ?:languages ?p", 'lang_code', $language_condition);
}

/**
 * Gets currensies list
 * 
 * @param bool $only_avail if true get only available currensies
 * @return array Currencies list
 */
function fn_get_simple_currencies($only_avail = true)
{
	$status_cond = ($only_avail) ? "WHERE status = 'A'" : '';

	return db_get_hash_single_array("SELECT a.*, b.description FROM ?:currencies as a LEFT JOIN ?:currency_descriptions as b ON a.currency_code = b.currency_code AND lang_code = ?s $status_cond ORDER BY a.position", array('currency_code' , 'description'), CART_LANGUAGE);
}

/**
 * Gets only active languages list (as lang_code => name)
 * 
 * @param bool $include_hidden if true get hiddenlanguages too
 * @return array Currencies list
 */
function fn_get_simple_languages($include_hidden = false)
{
	$language_condition = $include_hidden ? "WHERE status <> 'D'" : "WHERE status = 'A'";
	return db_get_hash_single_array("SELECT lang_code, name FROM ?:languages ?p", array('lang_code', 'name'), $language_condition);
}

/**
 * Gets name of menu
 * 
 * @param int $menu_id Menu identifier
 * @param string $lang_code 2 letters languge code
 * @return string Menu mane
 */
function fn_get_menu_name($menu_id, $lang_code = DESCR_SL)
{
	return Menu::get_name($menu_id, $lang_code);
}

/**
 * Returns list of active menus
 * 
 * @return array menus list
 */
function fn_get_menus()
{	
	$menus = array();
	$_menus = Menu::get_list(" AND status = 'A'");
	foreach($_menus as $menu) {
		$menus[$menu['menu_id']] = $menu['name'];
	}
	return $menus;
}

/**
 * Checks that menu can be modified
 * 
 * @param int $menu_id Menu identifier
 * @return bool True if menu can be modified, false otherwise
 */
function fn_check_menu_owner($menu_id)
{	

		$allow = true;


	return $allow;
}

/**
 * Gets list of menu items for block menu
 * 
 * @param mixed $value Default value of current block content item
 * @param array $block Block params
 * @param array $block_scheme Scheme of block
 * @return array List of menu items
 */
function fn_get_menu_items($value, $block, $block_scheme)
{
	$menu_items = array();

	if (!empty($block['content']['menu']) && Menu::get_status($block['content']['menu']) == 'A') {
		$params = array(
			'section' => 'A',
			'get_params' => true,
			'icon_name' => '',
			'multi_level' => true,
			'use_localization' => true,
			'status' => 'A',
			'generate_levels' => true,
			'request' => array(
				'menu_id' => $block['content']['menu'],
			)
		);
		$menu_items = fn_top_menu_form(fn_get_static_data($params));
		fn_dropdown_appearance_cut_second_third_levels($menu_items, 'subitems', $block['properties']);
	}

	return $menu_items;
}

/**
 * Gets all dispatches used in cart with only enabled add-ons
 * 
 * @param string $lang_code 2 letters languge code
 * @return array Dispatches list
 */
function fn_get_all_dispatches($lang_code = DESCR_SL)
{
	Registry::register_cache('dispatch_list', array('addons'), CACHE_LEVEL_STATIC);

	if (Registry::is_exist('dispatch_list') == true) {
		$dispatch_list = Registry::get('dispatch_list');
	} else {
		$skin_path = Registry::get('skin_path') . '/customer/';

		$controllers = fn_get_dir_contents($skin_path . 'views', true, false, null, $skin_path . 'views/');

		// Now get tabs blocks from addons
		foreach (Registry::get('addons') as $addon => $v) {
			if ($v['status'] == 'A') {
				$_controllers = fn_get_dir_contents($skin_path . 'addons/' . $addon . '/views', true, false, null, $skin_path . 'addons/' . $addon . '/views/');
				if (!empty($_controllers)) {
					$controllers = fn_array_merge($controllers, $_controllers, false);
				}
			}
		}

		$dispatch_list = array();
		foreach($controllers as $controller) {
			$modes = fn_get_dir_contents($controller, false, true, '.tpl');
			if (!empty($modes)) {
				$dispatch_list[fn_basename($controller)] = fn_get_lang_var(fn_basename($controller), $lang_code);
			}
			foreach ($modes as $mode) {
				$dispatch = fn_basename($controller) . '.' . substr($mode, 0, -4);
				$dispatch_list[$dispatch] = fn_get_lang_var($dispatch, $lang_code);
			}
		}

		Registry::set('dispatch_list', $dispatch_list);
	}

	return $dispatch_list;
}

/**
 * Checks that $url is current
 * 
 * @param string $url URL to check
 * @param string $active_for Dispatch that URL must be active
 * @param string $controller Current controlelr
 * @param string $mode Current mode
 * @param string $action Current action
 * @return bool True on success, false otherwise
 */
function fn_is_current_url($url, $active_for = '', $controller = CONTROLLER, $mode = MODE, $action = ACTION)
{
	$active = false;

	if (!empty($active_for)) {
		$dispatch = explode('.', $active_for);
		if (isset($dispatch[0]) && $dispatch[0] == $controller) {
			if (isset($dispatch[1]) && $dispatch[1] == $mode) {
				if (!isset($dispatch[2]) || $dispatch[2] == $action || $action == '') {
					$active = true;
				} elseif (!isset($dispatch[2])) {
					$active = true;
				}
			} elseif (!isset($dispatch[1])) {
				$active = true;
			}
		} 
	} else {
		$params = fn_normalize_parce_url($url);

		if (!isset($params['host']) || $params['host'] == $_SERVER['HTTP_HOST']) {
			if (!empty($params['query'])) {
				$active = $params['query'] == $_SERVER['QUERY_STRING'];
			}
		}
	}

	return $active;
}

/**
 * Normalizes URL by fn_url function
 * 
 * @param string $url URL to normalize
 * @return string Normalized URL
 */
function fn_normalize_parce_url($url, $index_script = INDEX_SCRIPT)
{
	if (strpos($url, $index_script . '?') === FALSE) {
		$url = fn_url($url, null, null, '&');
	} 

	return parse_url($url);
}
?>